#!/usr/bin/env node

const fs = require('fs');
const { execSync } = require('child_process');

console.log('üåç Test de validation des traductions dynamiques (Version 2)\n');

let allTestsPassed = true;

// Fichiers √† exclure des v√©rifications (fichiers obsol√®tes, alternatives ou utilitaires)
const excludedFiles = [
  'MediaDetailScreenFixed.tsx',
  'MediaDetailScreenOld.tsx', 
  'MediaDetailScreenSimplified.tsx',
  'RoomScreenV2.tsx',
  'RoomScreenSwipe.tsx',
  'utils/translations.ts' // Contient des traductions pour l'ancien syst√®me
];

// V√©rifier les imports de traduction dans les fichiers principaux
function checkTranslationImports() {
  console.log('üìã V√©rification des imports et hooks:\n');
  
  const mainFiles = [
    'mobile/src/components/MediaItem.tsx',
    'mobile/src/screens/RoomScreen.tsx',
    'mobile/src/components/TabHeader.tsx',
    'mobile/src/screens/MediaDetailScreen.tsx',
    'mobile/src/screens/SearchScreen.tsx',
    'mobile/src/screens/CreateVoteScreen.tsx'
  ];
  
  let hasErrors = false;
  
  mainFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      const hasTranslationImport = content.includes('useTranslation');
      const hasTranslationHook = content.includes('const { t } = useTranslation()');
      const filename = filePath.split('/').pop();
      
      if (hasTranslationImport && hasTranslationHook) {
        console.log(`‚úÖ ${filename}: Imports et hooks de traduction pr√©sents`);
      } else {
        console.log(`‚ùå ${filename}: Imports ou hooks de traduction manquants`);
        hasErrors = true;
      }
    }
  });
  
  return !hasErrors;
}

// Fonction pour v√©rifier l'absence de textes en dur
function checkHardcodedTexts() {
  console.log('\nüìù V√©rification de l\'absence de textes en dur:\n');
  
  const hardcodedTexts = [
    'Pr√©vu', 'En cours', 'Termin√©', 'Abandonn√©', '√Ä regarder',
    'Vote en cours', 'Vote termin√©', 'Vote expir√©',
    'EN COURS', 'TERMIN√â', 'EXPIR√â',
    'Aucun m√©dia', 'Ajoutez des m√©dias', 'Commencez √† regarder', 'Terminez des m√©dias'
  ];
  
  let hasErrors = false;
  
  hardcodedTexts.forEach(text => {
    try {
      const result = execSync(`grep -r "'${text}'" mobile/src --include="*.tsx" --include="*.ts"`, { encoding: 'utf8' });
      // Filtrer les r√©sultats pour exclure les fichiers obsol√®tes, commentaires et logs
      const filteredLines = result.split('\n').filter(line => {
        if (!line.trim()) return false;
        if (excludedFiles.some(excluded => line.includes(excluded))) return false;
        if (line.includes('//') || line.includes('/*') || line.includes('console.log') || line.includes('console.error')) return false;
        return true;
      });
      
      if (filteredLines.length > 0) {
        console.log(`‚ùå Texte en dur trouv√©: "${text}"`);
        // console.log('D√©tails:', filteredLines.join('\n'));
        hasErrors = true;
      } else {
        console.log(`‚úÖ Texte "${text}" correctement traduit`);
      }
    } catch (error) {
      console.log(`‚úÖ Texte "${text}" correctement traduit`);
    }
  });
  
  return !hasErrors;
}

// V√©rifier l'utilisation de translateStatus
function checkTranslateStatusUsage() {
  console.log('\nüîÑ V√©rification de l\'utilisation de translateStatus:\n');
  
  try {
    const result = execSync('grep -r "translateStatus" mobile/src --include="*.tsx" --include="*.ts"', { encoding: 'utf8' });
    if (result.trim()) {
      console.log('‚úÖ Fonction translateStatus utilis√©e');
      return true;
    } else {
      console.log('‚ùå Fonction translateStatus non utilis√©e');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Fonction translateStatus non utilis√©e');
    return false;
  }
}

// V√©rifier l'utilisation de t()
function checkTFunctionUsage() {
  console.log('\nüìñ V√©rification de l\'utilisation de t():\n');
  
  const requiredKeys = [
    't(\'vote.voteInProgress\')',
    't(\'vote.activeLabel\')',
    't(\'room.noMedia\')',
    't(\'status.planned\')'
  ];
  
  let hasErrors = false;
  
  requiredKeys.forEach(key => {
    try {
      const result = execSync(`grep -r "${key}" mobile/src --include="*.tsx" --include="*.ts"`, { encoding: 'utf8' });
      if (result.trim()) {
        console.log(`‚úÖ Cl√© de traduction utilis√©e: ${key}`);
      } else {
        console.log(`‚ùå Cl√© de traduction manquante: ${key}`);
        hasErrors = true;
      }
    } catch (error) {
      console.log(`‚ùå Cl√© de traduction manquante: ${key}`);
      hasErrors = true;
    }
  });
  
  return !hasErrors;
}

// V√©rifier le nettoyage des constantes
function checkConstantsCleanup() {
  console.log('\nüßπ V√©rification du nettoyage des constantes:\n');
  
  const constantsPath = 'mobile/src/constants/index.ts';
  
  if (fs.existsSync(constantsPath)) {
    const constantsContent = fs.readFileSync(constantsPath, 'utf8');
    
    // V√©rifier l'absence de labels en dur dans les constantes
    const hasHardcodedLabels = constantsContent.includes('label:') && 
                               (constantsContent.includes('√Ä regarder') || 
                                constantsContent.includes('En cours') ||
                                constantsContent.includes('Termin√©'));
    
    if (!hasHardcodedLabels) {
      console.log('‚úÖ Constantes: Labels en dur supprim√©s');
      return true;
    } else {
      console.log('‚ùå Constantes: Labels en dur toujours pr√©sents');
      return false;
    }
  } else {
    console.log('‚ùå Fichier de constantes introuvable');
    return false;
  }
}

// V√©rifier les fichiers de traduction
function checkTranslationFiles() {
  console.log('\nüìö V√©rification des fichiers de traduction:\n');
  
  const languages = ['fr', 'en', 'es', 'pt'];
  const requiredKeys = [
    'status.planned',
    'status.watching', 
    'status.completed',
    'vote.voteInProgress',
    'vote.activeLabel',
    'vote.createVote',
    'room.noMedia',
    'common.delete',
    'common.addToList',
    'common.proposeMovies',
    'common.addMoviesForVote'
  ];
  
  let hasErrors = false;
  
  languages.forEach(lang => {
    const filePath = `mobile/src/i18n/locales/${lang}.json`;
    
    if (fs.existsSync(filePath)) {
      try {
        const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        
        const allKeysPresent = requiredKeys.every(key => {
          const keys = key.split('.');
          let current = content;
          
          for (const k of keys) {
            if (!current || !current[k]) {
              return false;
            }
            current = current[k];
          }
          
          return true;
        });
        
        if (allKeysPresent) {
          console.log(`‚úÖ ${lang}.json: Toutes les cl√©s requises pr√©sentes`);
        } else {
          console.log(`‚ùå ${lang}.json: Cl√©s manquantes`);
          hasErrors = true;
        }
      } catch (error) {
        console.log(`‚ùå ${lang}.json: Erreur de parsing JSON`);
        hasErrors = true;
      }
    } else {
      console.log(`‚ùå ${lang}.json: Fichier manquant`);
      hasErrors = true;
    }
  });
  
  return !hasErrors;
}

// Ex√©cution des tests
allTestsPassed = checkTranslationImports() && allTestsPassed;
allTestsPassed = checkHardcodedTexts() && allTestsPassed;
allTestsPassed = checkTranslateStatusUsage() && allTestsPassed;
allTestsPassed = checkTFunctionUsage() && allTestsPassed;
allTestsPassed = checkConstantsCleanup() && allTestsPassed;
allTestsPassed = checkTranslationFiles() && allTestsPassed;

console.log('\n' + '='.repeat(50));

if (allTestsPassed) {
  console.log('‚úÖ TOUS LES TESTS ONT R√âUSSI !');
  console.log('\nTous les contenus dynamiques utilisent maintenant la langue s√©lectionn√©e.');
  process.exit(0);
} else {
  console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
  console.log('\nV√©rifiez les erreurs ci-dessus et corrigez les probl√®mes.');
  process.exit(1);
}
