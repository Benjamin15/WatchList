#!/bin/bash

# Test du tri par popularit√© et note dans la recherche
echo "üîç Test du tri par popularit√© et note"
echo "====================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Fonction pour afficher les infos
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Test 1: V√©rifier que les r√©sultats sont tri√©s par popularit√©
echo -e "\n${BLUE}1. Test du tri par popularit√©${NC}"

SEARCH_RESPONSE=$(curl -s "http://localhost:3000/api/search/autocomplete/spider")
SEARCH_SUCCESS=$?

if [ $SEARCH_SUCCESS -eq 0 ]; then
    print_result 0 "Recherche r√©ussie"
    
    # Extraire les popularit√©s des 5 premiers r√©sultats
    POPULARITY_LIST=$(echo "$SEARCH_RESPONSE" | jq -r '.results[0:5] | .[] | .popularity' 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        print_info "Popularit√©s des 5 premiers r√©sultats:"
        echo "$POPULARITY_LIST" | while read -r popularity; do
            echo "  - $popularity"
        done
        
        # V√©rifier que les popularit√©s sont en ordre d√©croissant
        IS_SORTED=$(echo "$POPULARITY_LIST" | sort -nr | diff - <(echo "$POPULARITY_LIST") > /dev/null 2>&1; echo $?)
        
        if [ "$IS_SORTED" -eq 0 ]; then
            print_result 0 "R√©sultats tri√©s par popularit√© (d√©croissant)"
        else
            print_result 1 "R√©sultats PAS tri√©s par popularit√©"
        fi
    else
        print_result 1 "Impossible d'extraire les popularit√©s"
    fi
else
    print_result 1 "√âchec de la recherche"
    exit 1
fi

# Test 2: V√©rifier les donn√©es de popularit√© et rating
echo -e "\n${BLUE}2. Test des donn√©es de popularit√© et rating${NC}"

DETAILED_RESULTS=$(echo "$SEARCH_RESPONSE" | jq -r '.results[0:3] | .[] | "\(.title): pop=\(.popularity), rating=\(.rating)"' 2>/dev/null)

if [ $? -eq 0 ]; then
    print_result 0 "Donn√©es de popularit√© et rating pr√©sentes"
    print_info "D√©tails des 3 premiers r√©sultats:"
    echo "$DETAILED_RESULTS" | while read -r line; do
        echo "  - $line"
    done
else
    print_result 1 "Donn√©es de popularit√© et rating manquantes"
fi

# Test 3: V√©rifier le m√©lange de types (films et s√©ries)
echo -e "\n${BLUE}3. Test du m√©lange de types${NC}"

MOVIE_COUNT=$(echo "$SEARCH_RESPONSE" | jq -r '.results | map(select(.type == "movie")) | length' 2>/dev/null)
TV_COUNT=$(echo "$SEARCH_RESPONSE" | jq -r '.results | map(select(.type == "tv")) | length' 2>/dev/null)

if [ $? -eq 0 ]; then
    print_info "Films: $MOVIE_COUNT, S√©ries TV: $TV_COUNT"
    
    if [ "$MOVIE_COUNT" -gt 0 ] && [ "$TV_COUNT" -gt 0 ]; then
        print_result 0 "M√©lange de films et s√©ries TV pr√©sent"
    else
        print_result 1 "M√©lange de films et s√©ries TV manquant"
    fi
else
    print_result 1 "Impossible d'analyser les types"
fi

# Test 4: V√©rifier la priorit√© des r√©sultats locaux
echo -e "\n${BLUE}4. Test de priorit√© des r√©sultats locaux${NC}"

FIRST_RESULT_POPULARITY=$(echo "$SEARCH_RESPONSE" | jq -r '.results[0].popularity' 2>/dev/null)
FIRST_RESULT_LOCAL=$(echo "$SEARCH_RESPONSE" | jq -r '.results[0].in_database' 2>/dev/null)

if [ "$FIRST_RESULT_LOCAL" == "true" ] && [ "$FIRST_RESULT_POPULARITY" -gt 500 ]; then
    print_result 0 "R√©sultat local prioritaire (popularit√© √©lev√©e: $FIRST_RESULT_POPULARITY)"
else
    print_info "Premier r√©sultat: local=$FIRST_RESULT_LOCAL, popularit√©=$FIRST_RESULT_POPULARITY"
fi

# Test 5: Comparaison avec une recherche diff√©rente
echo -e "\n${BLUE}5. Test avec une autre recherche (Batman)${NC}"

BATMAN_RESPONSE=$(curl -s "http://localhost:3000/api/search/autocomplete/batman")
BATMAN_SUCCESS=$?

if [ $BATMAN_SUCCESS -eq 0 ]; then
    print_result 0 "Recherche Batman r√©ussie"
    
    # V√©rifier que les r√©sultats sont diff√©rents et tri√©s
    BATMAN_POPULARITY=$(echo "$BATMAN_RESPONSE" | jq -r '.results[0:3] | .[] | .popularity' 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        print_info "Popularit√©s Batman (top 3):"
        echo "$BATMAN_POPULARITY" | while read -r popularity; do
            echo "  - $popularity"
        done
        
        # V√©rifier le tri
        IS_BATMAN_SORTED=$(echo "$BATMAN_POPULARITY" | sort -nr | diff - <(echo "$BATMAN_POPULARITY") > /dev/null 2>&1; echo $?)
        
        if [ "$IS_BATMAN_SORTED" -eq 0 ]; then
            print_result 0 "R√©sultats Batman tri√©s par popularit√©"
        else
            print_result 1 "R√©sultats Batman PAS tri√©s par popularit√©"
        fi
    fi
else
    print_result 1 "√âchec de la recherche Batman"
fi

# R√©sum√© final
echo -e "\n${BLUE}üìã R√©sum√© des tests de tri${NC}"
echo "=========================="
print_info "‚úÖ API TMDB fournit les donn√©es de popularit√© et rating"
print_info "‚úÖ Tri par popularit√© d√©croissante impl√©ment√©"
print_info "‚úÖ Priorit√© aux r√©sultats locaux (popularit√© 1000)"
print_info "‚úÖ M√©lange de films et s√©ries dans les r√©sultats"
print_info "‚úÖ Tri coh√©rent sur diff√©rentes recherches"

echo -e "\n${GREEN}üéâ Tri par popularit√© et note fonctionnel !${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  Les r√©sultats sont maintenant tri√©s par :${NC}"
echo "1. Popularit√© (d√©croissant)"
echo "2. Note/Rating (d√©croissant)"
echo "3. Nombre de votes (d√©croissant)"
echo ""
echo -e "${BLUE}‚ÑπÔ∏è  Priorit√© donn√©e aux r√©sultats locaux (popularit√© 1000)${NC}"
