#!/bin/bash

# Script de test pour la fonctionnalit√© d'affichage d'images
# Test d'int√©gration des images dans l'application WatchList

echo "üñºÔ∏è  Test d'int√©gration des images WatchList"
echo "============================================="

# Configuration
BACKEND_URL="http://localhost:3000"
API_URL="$BACKEND_URL/api"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo
echo "1. Test de la sant√© du serveur"
HEALTH_RESPONSE=$(curl -s $API_URL/health)
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Serveur backend accessible${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  R√©ponse: $HEALTH_RESPONSE${NC}"
else
    echo -e "${RED}‚ùå Serveur backend inaccessible${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Assurez-vous que le serveur backend est d√©marr√© sur le port 3000${NC}"
    exit 1
fi

echo
echo "2. Test de recherche avec images"
SEARCH_RESPONSE=$(curl -s "$API_URL/search/autocomplete/movie/spider-man")
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Recherche fonctionnelle${NC}"
    
    # V√©rifier si les r√©sultats contiennent des URLs d'images
    IMAGE_COUNT=$(echo "$SEARCH_RESPONSE" | jq -r '.results[] | select(.image_url != null) | .image_url' | wc -l)
    TOTAL_COUNT=$(echo "$SEARCH_RESPONSE" | jq -r '.results | length')
    
    echo -e "${BLUE}‚ÑπÔ∏è  Nombre total de r√©sultats: $TOTAL_COUNT${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  R√©sultats avec image_url: $IMAGE_COUNT${NC}"
    
    if [ "$IMAGE_COUNT" -gt 0 ]; then
        echo -e "${GREEN}‚úÖ Des images sont disponibles dans les r√©sultats de recherche${NC}"
        
        # Afficher quelques exemples d'URLs d'images
        echo -e "${BLUE}‚ÑπÔ∏è  Exemples d'URLs d'images trouv√©es:${NC}"
        echo "$SEARCH_RESPONSE" | jq -r '.results[] | select(.image_url != null) | "   - " + .title + ": " + .image_url' | head -3
    else
        echo -e "${RED}‚ö†Ô∏è  Aucune image trouv√©e dans les r√©sultats de recherche${NC}"
    fi
else
    echo -e "${RED}‚ùå Erreur lors de la recherche${NC}"
    exit 1
fi

echo
echo "3. Cr√©ation d'une room de test pour les images"
ROOM_RESPONSE=$(curl -s -X POST "$API_URL/rooms" \
    -H "Content-Type: application/json" \
    -d '{"name": "Test Images Room"}')

if [ $? -eq 0 ]; then
    ROOM_ID=$(echo "$ROOM_RESPONSE" | jq -r '.room_id')
    echo -e "${GREEN}‚úÖ Room cr√©√©e avec succ√®s${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Room ID: $ROOM_ID${NC}"
else
    echo -e "${RED}‚ùå Erreur lors de la cr√©ation de la room${NC}"
    exit 1
fi

echo
echo "4. Ajout d'un m√©dia avec image"
MEDIA_RESPONSE=$(curl -s -X POST "$API_URL/items/rooms/$ROOM_ID/items" \
    -H "Content-Type: application/json" \
    -d '{
        "title": "Spider-Man: No Way Home",
        "type": "movie",
        "year": 2021,
        "description": "Film avec images de test",
        "image_url": "https://image.tmdb.org/t/p/w500/1g0dhYtq4irTY1GPXvft6k4YLjm.jpg",
        "external_id": "tmdb_634649"
    }')

if [ $? -eq 0 ]; then
    MEDIA_ID=$(echo "$MEDIA_RESPONSE" | jq -r '.id')
    echo -e "${GREEN}‚úÖ M√©dia avec image ajout√© avec succ√®s${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Media ID: $MEDIA_ID${NC}"
    
    # V√©rifier que l'image_url est bien pr√©sente
    IMAGE_URL=$(echo "$MEDIA_RESPONSE" | jq -r '.image_url')
    if [ "$IMAGE_URL" != "null" ] && [ -n "$IMAGE_URL" ]; then
        echo -e "${GREEN}‚úÖ URL d'image pr√©sente: $IMAGE_URL${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Aucune URL d'image dans la r√©ponse${NC}"
    fi
else
    echo -e "${RED}‚ùå Erreur lors de l'ajout du m√©dia${NC}"
    exit 1
fi

echo
echo "5. R√©cup√©ration des items de la room (v√©rification images)"
ITEMS_RESPONSE=$(curl -s "$API_URL/rooms/$ROOM_ID/items")

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Items r√©cup√©r√©s avec succ√®s${NC}"
    
    # V√©rifier les images dans les items
    ITEMS_WITH_IMAGES=$(echo "$ITEMS_RESPONSE" | jq -r '.items[] | select(.image_url != null) | .title + ": " + .image_url' | wc -l)
    TOTAL_ITEMS=$(echo "$ITEMS_RESPONSE" | jq -r '.items | length')
    
    echo -e "${BLUE}‚ÑπÔ∏è  Nombre total d'items: $TOTAL_ITEMS${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Items avec images: $ITEMS_WITH_IMAGES${NC}"
    
    if [ "$ITEMS_WITH_IMAGES" -gt 0 ]; then
        echo -e "${GREEN}‚úÖ Des images sont pr√©sentes dans les items de la room${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è  D√©tails des images:${NC}"
        echo "$ITEMS_RESPONSE" | jq -r '.items[] | select(.image_url != null) | "   - " + .title + ": " + .image_url'
    else
        echo -e "${RED}‚ö†Ô∏è  Aucune image dans les items de la room${NC}"
    fi
else
    echo -e "${RED}‚ùå Erreur lors de la r√©cup√©ration des items${NC}"
    exit 1
fi

echo
echo "6. Test de validation d'URL d'image"
# Tester une URL d'image pour v√©rifier qu'elle est accessible
if [ -n "$IMAGE_URL" ] && [ "$IMAGE_URL" != "null" ]; then
    echo -e "${BLUE}‚ÑπÔ∏è  Test d'accessibilit√© de l'image: $IMAGE_URL${NC}"
    HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" "$IMAGE_URL")
    
    if [ "$HTTP_STATUS" -eq 200 ]; then
        echo -e "${GREEN}‚úÖ Image accessible (HTTP $HTTP_STATUS)${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Image non accessible (HTTP $HTTP_STATUS)${NC}"
    fi
else
    echo -e "${BLUE}‚ÑπÔ∏è  Aucune URL d'image √† tester${NC}"
fi

echo
echo "üìã R√©sum√© des tests d'images"
echo "============================"
echo -e "${BLUE}‚ÑπÔ∏è  Room de test cr√©√©e: $ROOM_ID${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  M√©dia de test ajout√©: $MEDIA_ID${NC}"
echo
echo -e "${BLUE}‚ÑπÔ∏è  Pour tester l'application mobile:${NC}"
echo "1. Ouvrir l'app mobile"
echo "2. Utiliser le code de room: $ROOM_ID"
echo "3. V√©rifier que les m√©dias s'affichent avec des images"
echo "4. Tester le fallback emoji si les images ne chargent pas"
echo "5. Tester l'ajout de m√©dias via la recherche avec images"
echo
echo -e "${GREEN}‚úÖ Tests d'int√©gration des images termin√©s !${NC}"
