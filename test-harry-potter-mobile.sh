#!/bin/bash

echo "üîß Test de reproduction du probl√®me Harry Potter"
echo "================================================"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les logs color√©s
log_info() {
    echo -e "${GREEN}‚ÑπÔ∏è  $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que le serveur fonctionne
log_info "V√©rification du serveur..."
if ! curl -s http://localhost:3000/api/health >/dev/null; then
    log_error "Le serveur n'est pas d√©marr√©. Veuillez lancer 'npm start' dans le dossier server."
    exit 1
fi

# Cr√©er une room de test
log_info "Cr√©ation d'une room de test..."
ROOM_DATA=$(curl -s -X POST http://localhost:3000/api/rooms \
  -H "Content-Type: application/json" \
  -d '{"name":"Test Harry Potter"}')

ROOM_ID=$(echo "$ROOM_DATA" | jq -r '.id')
ROOM_CODE=$(echo "$ROOM_DATA" | jq -r '.room_id')

log_info "Room cr√©√©e: ID=$ROOM_ID, Code=$ROOM_CODE"

# Ajouter Harry Potter √† la room
log_info "Ajout de Harry Potter √† la room..."
HARRY_POTTER_DATA='{
  "title": "Harry Potter √† l'\''√©cole des sorciers",
  "type": "movie",
  "external_id": "tmdb_movie_671",
  "description": "Harry Potter, un jeune orphelin, est √©lev√© par son oncle Vernon et sa tante P√©tunia qui le d√©testent. Alors qu'\''il √©tait haut comme trois pommes, ces derniers lui ont racont√© que ses parents √©taient morts dans un accident de voiture. Le jour de son onzi√®me anniversaire, Harry re√ßoit la visite d'\''un homme gigantesque se nommant Hagrid, et celui-ci lui r√©v√®le qu'\''il est en fait le fils de deux puissants magiciens et qu'\''il poss√®de lui aussi d'\''extraordinaires pouvoirs.",
  "image_url": "https://image.tmdb.org/t/p/w500/fbxQ44VRdM2PVzHSNajUseUteem.jpg",
  "release_date": "2001-01-01",
  "note": 7.9
}'

ADDED_ITEM=$(curl -s -X POST "http://localhost:3000/api/rooms/$ROOM_CODE/items" \
  -H "Content-Type: application/json" \
  -d "$HARRY_POTTER_DATA")

log_info "Item ajout√©: $(echo "$ADDED_ITEM" | jq -r '.title')"

# V√©rifier les donn√©es dans la room
log_info "V√©rification des donn√©es dans la room..."
ROOM_ITEMS=$(curl -s "http://localhost:3000/api/rooms/$ROOM_CODE/items")

# Afficher les d√©tails de Harry Potter
HARRY_DETAILS=$(echo "$ROOM_ITEMS" | jq '.items[] | select(.title | contains("Harry Potter"))')

if [ -n "$HARRY_DETAILS" ]; then
    log_info "‚úÖ Harry Potter trouv√© dans la room:"
    echo "$HARRY_DETAILS" | jq '{
        id: .id,
        title: .title,
        external_id: .external_id,
        image_url: .image_url,
        type: .type
    }'
    
    # V√©rifier l'accessibilit√© de l'image
    IMAGE_URL=$(echo "$HARRY_DETAILS" | jq -r '.image_url')
    if [ "$IMAGE_URL" != "null" ] && [ -n "$IMAGE_URL" ]; then
        log_info "üñºÔ∏è  Test d'accessibilit√© de l'image: $IMAGE_URL"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$IMAGE_URL")
        if [ "$HTTP_STATUS" = "200" ]; then
            log_info "‚úÖ Image accessible (HTTP $HTTP_STATUS)"
        else
            log_error "‚ùå Image non accessible (HTTP $HTTP_STATUS)"
        fi
    else
        log_error "‚ùå Pas d'URL d'image trouv√©e"
    fi
else
    log_error "‚ùå Harry Potter non trouv√© dans la room"
fi

# Simuler le mapping c√¥t√© mobile
log_info "üîÑ Simulation du mapping c√¥t√© mobile..."
echo "$ROOM_ITEMS" | jq '.items[] | select(.title | contains("Harry Potter")) | {
    original_external_id: .external_id,
    original_image_url: .image_url,
    mapped_tmdb_id: (if .external_id then (.external_id | split("_")[2] | tonumber) else null end),
    mapped_poster_url: .image_url
}'

echo ""
log_info "üéØ Test termin√©!"
log_info "üìã Points √† v√©rifier:"
log_info "   1. L'image_url doit √™tre pr√©sente et accessible"
log_info "   2. Le external_id doit √™tre au format tmdb_movie_671"
log_info "   3. Le mapping c√¥t√© mobile doit extraire correctement le tmdbId"
log_info "   4. La posterUrl doit √™tre mapp√©e depuis image_url"
