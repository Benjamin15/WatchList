#!/bin/bash

# Test complet de la recherche en temps r√©el
echo "=== Test complet de la recherche en temps r√©el ==="

echo "‚úÖ Fonctionnalit√©s impl√©ment√©es :"
echo "   ‚Ä¢ Recherche d√©clench√©e √† chaque caract√®re (debounce 500ms)"
echo "   ‚Ä¢ Cache c√¥t√© serveur (5 min)"
echo "   ‚Ä¢ Indicateur de chargement dynamique"
echo "   ‚Ä¢ Annulation des requ√™tes pr√©c√©dentes"
echo "   ‚Ä¢ Seuil minimum de 2 caract√®res"
echo ""

echo "üîç Tests de l'API de recherche :"
echo ""

echo "1. Test avec query courte (< 2 caract√®res) - doit √™tre filtr√© c√¥t√© mobile :"
echo "   ‚ùå Pas de requ√™te envoy√©e pour 'a'"
echo ""

echo "2. Test avec query normale :"
TIME_START=$(date +%s%3N)
RESULT_COUNT=$(curl -s "http://localhost:3000/api/search/autocomplete/one%20piece" | jq '.results | length')
TIME_END=$(date +%s%3N)
DURATION=$((TIME_END - TIME_START))
echo "   ‚úÖ 'one piece' -> $RESULT_COUNT r√©sultats en ${DURATION}ms"
echo ""

echo "3. Test du cache (m√™me requ√™te) :"
TIME_START=$(date +%s%3N)
RESULT_COUNT=$(curl -s "http://localhost:3000/api/search/autocomplete/one%20piece" | jq '.results | length')
TIME_END=$(date +%s%3N)
DURATION=$((TIME_END - TIME_START))
echo "   ‚úÖ 'one piece' (cache) -> $RESULT_COUNT r√©sultats en ${DURATION}ms"
echo ""

echo "4. Test avec caract√®res progressifs (simulation frappe) :"
for query in "a" "at" "att" "atta" "attack"; do
    if [ ${#query} -ge 2 ]; then
        RESULT_COUNT=$(curl -s "http://localhost:3000/api/search/autocomplete/$query" | jq '.results | length')
        echo "   ‚úÖ '$query' -> $RESULT_COUNT r√©sultats"
    else
        echo "   ‚ùå '$query' -> filtr√© c√¥t√© mobile (< 2 chars)"
    fi
done
echo ""

echo "üì± Configuration mobile :"
echo "   ‚Ä¢ Debounce : 500ms"
echo "   ‚Ä¢ Seuil minimum : 2 caract√®res"
echo "   ‚Ä¢ Indicateur de chargement : ‚è≥"
echo "   ‚Ä¢ Cache c√¥t√© serveur : 5 minutes"
echo ""

echo "üéØ Performance optimis√©e pour la recherche en temps r√©el !"
echo "=== Test termin√© ==="
