#!/usr/bin/env node

/**
 * Test de correction: Persistance des votes supprim√©s par room
 * 
 * Valide que les votes supprim√©s sont correctement stock√©s par room
 * et ne r√©apparaissent pas lors du changement de room
 */

console.log('üîß TEST: Correction persistance votes supprim√©s par room');
console.log('======================================================');

// Simulation de l'AsyncStorage avec cl√©s par room
const mockAsyncStorage = new Map();

// Fonctions corrig√©es simul√©es
const getDismissedVotesStorageKey = (roomId) => `dismissedVotes_${roomId}`;

const loadDismissedVotes = async (roomId) => {
  const stored = mockAsyncStorage.get(getDismissedVotesStorageKey(roomId));
  if (stored) {
    const votesArray = JSON.parse(stored);
    return new Set(votesArray);
  }
  return new Set();
};

const saveDismissedVotes = async (roomId, dismissedVotes) => {
  const votesArray = Array.from(dismissedVotes);
  mockAsyncStorage.set(getDismissedVotesStorageKey(roomId), JSON.stringify(votesArray));
  console.log(`  üíæ ${votesArray.length} votes supprim√©s sauvegard√©s pour room ${roomId}`);
};

// Simulation du test
async function runTest() {
  console.log('\nüìã Sc√©nario de test:');
  console.log('1. User est dans room "ABC123"');
  console.log('2. User supprime les votes 101 et 102');
  console.log('3. User change pour room "XYZ789"');
  console.log('4. User supprime le vote 201');
  console.log('5. User revient √† room "ABC123"');
  console.log('6. V√©rifier que seuls les votes 101 et 102 sont supprim√©s');

  // √âtape 1: Room ABC123
  console.log('\nüè† √âTAPE 1: Room ABC123');
  let currentRoom = 'ABC123';
  let dismissedVotes = await loadDismissedVotes(currentRoom);
  console.log(`  √âtat initial: ${dismissedVotes.size} votes supprim√©s`);

  // √âtape 2: Suppression votes 101 et 102
  console.log('\n‚ùå √âTAPE 2: Suppression votes 101 et 102');
  dismissedVotes.add(101);
  dismissedVotes.add(102);
  await saveDismissedVotes(currentRoom, dismissedVotes);
  console.log(`  √âtat: ${dismissedVotes.size} votes supprim√©s dans room ${currentRoom}`);

  // √âtape 3: Changement pour room XYZ789
  console.log('\nüîÑ √âTAPE 3: Changement pour room XYZ789');
  currentRoom = 'XYZ789';
  dismissedVotes = await loadDismissedVotes(currentRoom);
  console.log(`  √âtat room ${currentRoom}: ${dismissedVotes.size} votes supprim√©s`);

  // √âtape 4: Suppression vote 201 dans la nouvelle room
  console.log('\n‚ùå √âTAPE 4: Suppression vote 201');
  dismissedVotes.add(201);
  await saveDismissedVotes(currentRoom, dismissedVotes);
  console.log(`  √âtat: ${dismissedVotes.size} votes supprim√©s dans room ${currentRoom}`);

  // √âtape 5: Retour √† room ABC123
  console.log('\nüîÑ √âTAPE 5: Retour √† room ABC123');
  currentRoom = 'ABC123';
  dismissedVotes = await loadDismissedVotes(currentRoom);
  console.log(`  √âtat room ${currentRoom}: ${dismissedVotes.size} votes supprim√©s`);
  
  // √âtape 6: V√©rification
  console.log('\n‚úÖ √âTAPE 6: V√©rification');
  const hasVote101 = dismissedVotes.has(101);
  const hasVote102 = dismissedVotes.has(102);
  const hasVote201 = dismissedVotes.has(201);
  
  console.log(`  Vote 101 supprim√©: ${hasVote101 ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Vote 102 supprim√©: ${hasVote102 ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Vote 201 absent: ${!hasVote201 ? '‚úÖ' : '‚ùå'} (doit √™tre dans autre room)`);

  // V√©rification finale
  const testPassed = hasVote101 && hasVote102 && !hasVote201;
  
  console.log('\nüìä R√©sultat du test:');
  if (testPassed) {
    console.log('üéâ SUCC√àS: La persistance par room fonctionne correctement !');
    console.log('‚úì Les votes supprim√©s sont isol√©s par room');
    console.log('‚úì Pas de pollution crois√©e entre rooms');
    console.log('‚úì La persistance survit aux changements de room');
  } else {
    console.log('‚ùå √âCHEC: Probl√®me de persistance par room');
  }

  // Afficher l'√©tat final du stockage
  console.log('\nüíæ √âtat final du stockage:');
  for (const [key, value] of mockAsyncStorage.entries()) {
    const votes = JSON.parse(value);
    console.log(`  ${key}: [${votes.join(', ')}]`);
  }

  return testPassed;
}

// Ex√©cuter le test
runTest().then(success => {
  console.log('\nüìù R√©sum√© de la correction:');
  console.log('‚Ä¢ AVANT: Cl√© globale "dismissedVotes" ‚Üí pollution entre rooms');
  console.log('‚Ä¢ APR√àS: Cl√© par room "dismissedVotes_ROOMID" ‚Üí isolation correcte');
  console.log('‚Ä¢ Changement: loadDismissedVotes(roomId) + saveDismissedVotes(roomId, votes)');
  console.log('‚Ä¢ Bonus: R√©initialisation votes temporaires √† chaque changement de room');
  
  process.exit(success ? 0 : 1);
});
