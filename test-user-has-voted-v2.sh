#!/bin/bash

# Test simple avec v√©rification des IDs

API_BASE="http://localhost:3000/api"
TEST_DEVICE_ID="test-device-123"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Cr√©er une room simple avec un nom unique
TIMESTAMP=$(date +%s)
ROOM_NAME="Vote Test Room $TIMESTAMP"

echo "=== Cr√©ation d'une room de test ==="
ROOM_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"name\": \"$ROOM_NAME\"}" "$API_BASE/rooms")
echo "Room Response: $ROOM_RESPONSE"

ROOM_ID=$(echo "$ROOM_RESPONSE" | grep -o '"room_id":"[^"]*"' | cut -d'"' -f4)
log_info "Room ID: $ROOM_ID"

# Ajouter 3 m√©dias pour avoir du choix dans le vote
echo -e "\n=== Ajout de m√©dias ==="
for i in 1 2 3; do
    MEDIA_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
      -d "{
        \"title\": \"Test Movie $i\",
        \"type\": \"movie\",
        \"externalId\": \"tmdb:1234$i\",
        \"description\": \"Genre $i\"
      }" \
      "$API_BASE/rooms/$ROOM_ID/items")
    echo "Media $i Response: $MEDIA_RESPONSE"
done

# R√©cup√©rer les m√©dias de la room et leurs vrais IDs
echo -e "\n=== R√©cup√©ration des m√©dias ==="
ITEMS_RESPONSE=$(curl -s "$API_BASE/rooms/$ROOM_ID/items")
echo "Items Response: $ITEMS_RESPONSE"

# Extraire les IDs des items (on prend les 3 premiers)
MEDIA_IDS=$(echo "$ITEMS_RESPONSE" | jq -r '.items[] | .id' | head -3 | tr '\n' ',' | sed 's/,$//')
log_info "Media IDs: $MEDIA_IDS"

if [ -z "$MEDIA_IDS" ]; then
    log_error "Impossible de r√©cup√©rer les IDs des m√©dias"
    exit 1
fi

# Cr√©er un vote avec les bons IDs
echo -e "\n=== Cr√©ation d'un vote ==="
VOTE_PAYLOAD="{
    \"roomId\": \"$ROOM_ID\",
    \"title\": \"Test Vote: Quel film regarder?\",
    \"description\": \"Vote de test pour valider le syst√®me userHasVoted\",
    \"mediaIds\": [$MEDIA_IDS],
    \"createdBy\": \"Test User\"
}"

echo "Vote Payload: $VOTE_PAYLOAD"

VOTE_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$VOTE_PAYLOAD" "$API_BASE/votes")
echo "Vote Response: $VOTE_RESPONSE"

VOTE_ID=$(echo "$VOTE_RESPONSE" | grep -o '"voteId":[0-9]*' | cut -d':' -f2)
log_info "Vote ID: $VOTE_ID"

if [ -z "$VOTE_ID" ]; then
    log_error "Impossible de cr√©er le vote"
    echo "D√©tails de l'erreur: $VOTE_RESPONSE"
    exit 1
fi

log_success "‚úì Vote cr√©√© avec succ√®s!"

# Test 1: R√©cup√©rer le vote AVANT d'avoir vot√© (userHasVoted doit √™tre false)
echo -e "\n=== Test 1: R√©cup√©ration vote AVANT vote ==="
VOTE_BEFORE=$(curl -s "$API_BASE/votes/$VOTE_ID?deviceId=$TEST_DEVICE_ID")
echo "Vote Before: $VOTE_BEFORE"

USER_VOTED_BEFORE=$(echo "$VOTE_BEFORE" | grep -o '"userHasVoted":[^,}]*' | cut -d':' -f2)
log_info "userHasVoted AVANT vote: $USER_VOTED_BEFORE"

if [ "$USER_VOTED_BEFORE" = "false" ]; then
    log_success "‚úì userHasVoted correctement √† false avant le vote"
else
    log_error "‚úó userHasVoted devrait √™tre false, mais est: $USER_VOTED_BEFORE"
fi

# R√©cup√©rer le premier option ID (pas media ID !)
OPTION_ID=$(echo "$VOTE_BEFORE" | jq -r '.data.options[0].id')
log_info "Option ID pour voter: $OPTION_ID"

if [ -z "$OPTION_ID" ]; then
    log_error "Impossible de r√©cup√©rer l'option ID"
    exit 1
fi

# Test 2: Soumettre un vote
echo -e "\n=== Test 2: Soumission d'un vote ==="
SUBMIT_PAYLOAD="{
    \"voteId\": $VOTE_ID,
    \"optionId\": $OPTION_ID,
    \"voterName\": \"Test Voter\",
    \"deviceId\": \"$TEST_DEVICE_ID\"
}"

echo "Submit Payload: $SUBMIT_PAYLOAD"

SUBMIT_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$SUBMIT_PAYLOAD" "$API_BASE/votes/submit")
echo "Submit Response: $SUBMIT_RESPONSE"

if echo "$SUBMIT_RESPONSE" | grep -q '"success":true'; then
    log_success "‚úì Vote soumis avec succ√®s"
else
    log_error "‚úó Erreur lors de la soumission du vote"
    exit 1
fi

# Test 3: R√©cup√©rer le vote APR√àS avoir vot√© (userHasVoted doit √™tre true)
echo -e "\n=== Test 3: R√©cup√©ration vote APR√àS vote ==="
VOTE_AFTER=$(curl -s "$API_BASE/votes/$VOTE_ID?deviceId=$TEST_DEVICE_ID")
echo "Vote After (extrait): $(echo "$VOTE_AFTER" | head -c 200)..."

USER_VOTED_AFTER=$(echo "$VOTE_AFTER" | grep -o '"userHasVoted":[^,}]*' | cut -d':' -f2)
log_info "userHasVoted APR√àS vote: $USER_VOTED_AFTER"

if [ "$USER_VOTED_AFTER" = "true" ]; then
    log_success "‚úì userHasVoted correctement √† true apr√®s le vote"
else
    log_error "‚úó userHasVoted devrait √™tre true, mais est: $USER_VOTED_AFTER"
fi

# Test 4: Tenter un double vote (doit √©chouer)
echo -e "\n=== Test 4: Tentative de double vote (doit √©chouer) ==="
DOUBLE_VOTE_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$SUBMIT_PAYLOAD" "$API_BASE/votes/submit")
echo "Double Vote Response: $DOUBLE_VOTE_RESPONSE"

if echo "$DOUBLE_VOTE_RESPONSE" | grep -q '"error"'; then
    log_success "‚úì Double vote correctement rejet√©"
else
    log_error "‚úó Le double vote devrait √™tre rejet√©"
fi

# R√©sum√© final
echo -e "\n=== R√âSUM√â DES TESTS ==="
log_info "Room ID: $ROOM_ID"
log_info "Vote ID: $VOTE_ID"
log_info "Option ID: $OPTION_ID"
log_info "Device ID: $TEST_DEVICE_ID"

if [ "$USER_VOTED_BEFORE" = "false" ] && [ "$USER_VOTED_AFTER" = "true" ]; then
    log_success "üéâ Syst√®me userHasVoted fonctionne parfaitement!"
else
    log_error "üîß Le syst√®me userHasVoted n√©cessite des corrections"
fi
