#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic des probl√®mes potentiels dans RoomScreen...\n');

const filePath = path.join(__dirname, 'mobile/src/screens/RoomScreen.tsx');

try {
  const content = fs.readFileSync(filePath, 'utf8');
  
  console.log('üìã V√©rifications de diagnostic:');
  
  // V√©rifier les imports
  const imports = [
    'useTranslation',
    'useLanguage', 
    'apiService',
    'LoadingScreen',
    'useFocusEffect'
  ];
  
  imports.forEach(imp => {
    if (content.includes(imp)) {
      console.log(`‚úÖ Import ${imp} pr√©sent`);
    } else {
      console.log(`‚ùå Import ${imp} manquant`);
    }
  });
  
  console.log('');
  
  // V√©rifier les fonctions de chargement
  const loadingFunctions = [
    'loadRoomData',
    'loadWatchlistItems', 
    'loadVotes',
    'loadAllData'
  ];
  
  loadingFunctions.forEach(func => {
    if (content.includes(`const ${func} = async`)) {
      console.log(`‚úÖ Fonction ${func} pr√©sente`);
    } else {
      console.log(`‚ùå Fonction ${func} manquante`);
    }
  });
  
  console.log('');
  
  // V√©rifier les hooks d'effet
  const hasUseEffect = content.includes('useEffect(() => {') && content.includes('loadAllData();');
  const hasUseFocusEffect = content.includes('useFocusEffect(');
  
  console.log(`${hasUseEffect ? '‚úÖ' : '‚ùå'} useEffect avec loadAllData pr√©sent`);
  console.log(`${hasUseFocusEffect ? '‚úÖ' : '‚ùå'} useFocusEffect pr√©sent`);
  
  console.log('');
  
  // V√©rifier les appels API
  const apiCalls = [
    'apiService.getRoom',
    'apiService.getWatchlist', 
    'apiService.getVotesByRoom'
  ];
  
  apiCalls.forEach(call => {
    if (content.includes(call)) {
      console.log(`‚úÖ Appel API ${call} pr√©sent`);
    } else {
      console.log(`‚ùå Appel API ${call} manquant`);
    }
  });
  
  console.log('');
  
  // V√©rifier la gestion du loading
  const hasSetLoadingFalse = content.includes('setIsLoading(false)');
  const hasLoadingState = content.includes('const [isLoading, setIsLoading] = useState(true)');
  
  console.log(`${hasLoadingState ? '‚úÖ' : '‚ùå'} √âtat isLoading initialis√©`);
  console.log(`${hasSetLoadingFalse ? '‚úÖ' : '‚ùå'} setIsLoading(false) pr√©sent`);
  
  console.log('');
  
  // V√©rifier les param√®tres de route
  const hasRouteParams = content.includes('const { roomId } = route.params;');
  console.log(`${hasRouteParams ? '‚úÖ' : '‚ùå'} Extraction des param√®tres de route`);
  
  console.log('');
  
  // Probl√®mes potentiels
  console.log('‚ö†Ô∏è  Probl√®mes potentiels √† v√©rifier:');
  
  if (!hasSetLoadingFalse) {
    console.log('   ‚Ä¢ L\'√©tat de chargement n\'est jamais mis √† false - chargement infini');
  }
  
  if (!hasUseEffect) {
    console.log('   ‚Ä¢ Aucun useEffect pour charger les donn√©es - √©cran vide');
  }
  
  if (!content.includes('apiService.getRoom')) {
    console.log('   ‚Ä¢ API getRoom manquante - pas de donn√©es de room');
  }
  
  if (!content.includes('apiService.getWatchlist')) {
    console.log('   ‚Ä¢ API getWatchlist manquante - pas de watchlist');
  }
  
  if (content.includes('console.error')) {
    console.log('   ‚Ä¢ Des console.error pr√©sents - v√©rifier les logs de l\'app');
  }
  
  if (content.includes('Alert.alert')) {
    console.log('   ‚Ä¢ Des Alert.alert pr√©sents - v√©rifier les alertes d\'erreur');
  }
  
  console.log('\nüí° Pour diagnostiquer plus pr√©cis√©ment, partagez les logs d\'erreur sp√©cifiques.');
  
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture du fichier:', error.message);
}

console.log('');
