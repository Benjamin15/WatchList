#!/bin/bash

# Test complet pour valider les swipes sur tous les onglets de RoomScreen
echo "üîÑ Test de validation des swipes sur tous les onglets"
echo "=========================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

BASE_URL="http://localhost:3000"

echo -e "${YELLOW}üìã Pr√©paration des donn√©es de test${NC}"

# Cr√©er une room de test
echo "Cr√©ation de la room de test..."
ROOM_RESPONSE=$(curl -s -X POST "$BASE_URL/api/rooms" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test Room Swipes"
  }')

echo "Room cr√©√©e: $ROOM_RESPONSE"

# Extraire le roomId de la r√©ponse
ROOM_ID=$(echo "$ROOM_RESPONSE" | jq -r '.room_id')
echo "Room ID: $ROOM_ID"

# Ajouter des m√©dias dans diff√©rents statuts pour tester tous les onglets
echo -e "${YELLOW}üé¨ Ajout de m√©dias pour chaque statut${NC}"

# M√©dias √† regarder (planned/a_voir)
echo "Ajout de m√©dias '√Ä regarder'..."
for i in {1..3}; do
  curl -s -X POST "$BASE_URL/api/rooms/$ROOM_ID/items" \
    -H "Content-Type: application/json" \
    -d '{
      "title": "Film √Ä Regarder '$i'",
      "type": "movie",
      "external_id": "tmdb_movie_'$((11000 + i))'",
      "status": "a_voir",
      "image_url": "https://image.tmdb.org/t/p/w500/test'$i'.jpg"
    }' > /dev/null
done

# M√©dias en cours (watching/en_cours)
echo "Ajout de m√©dias 'En cours'..."
for i in {1..3}; do
  curl -s -X POST "$BASE_URL/api/rooms/$ROOM_ID/items" \
    -H "Content-Type: application/json" \
    -d '{
      "title": "Film En Cours '$i'",
      "type": "movie",
      "external_id": "tmdb_movie_'$((12000 + i))'",
      "status": "en_cours",
      "image_url": "https://image.tmdb.org/t/p/w500/test'$i'.jpg"
    }' > /dev/null
done

# M√©dias termin√©s (completed/termine)
echo "Ajout de m√©dias 'Termin√©s'..."
for i in {1..3}; do
  curl -s -X POST "$BASE_URL/api/rooms/$ROOM_ID/items" \
    -H "Content-Type: application/json" \
    -d '{
      "title": "Film Termin√© '$i'",
      "type": "movie",
      "external_id": "tmdb_movie_'$((13000 + i))'",
      "status": "termine",
      "image_url": "https://image.tmdb.org/t/p/w500/test'$i'.jpg"
    }' > /dev/null
done

echo -e "${GREEN}‚úÖ Donn√©es de test pr√©par√©es${NC}"

# Modifier quelques items pour avoir des statuts diff√©rents
echo -e "${YELLOW}üìù Modification des statuts pour cr√©er des donn√©es vari√©es${NC}"

# R√©cup√©rer les items et modifier leurs statuts
ITEMS_DATA=$(curl -s "$BASE_URL/api/rooms/$ROOM_ID/items")
ITEM_IDS=($(echo "$ITEMS_DATA" | jq -r '.items[].id'))

# Passer les 3 premiers en "en_cours"
for i in {0..2}; do
  if [ -n "${ITEM_IDS[$i]}" ]; then
    curl -s -X PUT "$BASE_URL/api/items/${ITEM_IDS[$i]}" \
      -H "Content-Type: application/json" \
      -d '{"status": "en_cours"}' > /dev/null
    echo "Item ${ITEM_IDS[$i]} -> en_cours"
  fi
done

# Passer les 3 suivants en "termine"
for i in {3..5}; do
  if [ -n "${ITEM_IDS[$i]}" ]; then
    curl -s -X PUT "$BASE_URL/api/items/${ITEM_IDS[$i]}" \
      -H "Content-Type: application/json" \
      -d '{"status": "termine"}' > /dev/null
    echo "Item ${ITEM_IDS[$i]} -> termine"
  fi
done

# Laisser les 3 derniers en "a_voir"
echo "Items restants -> a_voir"

# V√©rifier les donn√©es
echo -e "${YELLOW}üìä V√©rification des donn√©es dans la room${NC}"
ROOM_DATA=$(curl -s "$BASE_URL/api/rooms/$ROOM_ID/items")

PLANNED_COUNT=$(echo "$ROOM_DATA" | jq '.items | map(select(.status == "a_voir")) | length')
WATCHING_COUNT=$(echo "$ROOM_DATA" | jq '.items | map(select(.status == "en_cours")) | length')
COMPLETED_COUNT=$(echo "$ROOM_DATA" | jq '.items | map(select(.status == "termine")) | length')

echo "M√©dias √† regarder: $PLANNED_COUNT"
echo "M√©dias en cours: $WATCHING_COUNT"
echo "M√©dias termin√©s: $COMPLETED_COUNT"

# Test des transitions de statut (simulation des swipes)
echo -e "${YELLOW}üîÑ Test des transitions de statut (simulation swipes)${NC}"

# R√©cup√©rer les items
ITEMS=$(echo "$ROOM_DATA" | jq -r '.items[].id')

# Test 1: Swipe "√Ä regarder" vers "En cours"
echo "Test 1: Transition √Ä regarder ‚Üí En cours"
PLANNED_ITEM=$(echo "$ROOM_DATA" | jq -r '.items | map(select(.status == "a_voir")) | .[0].id')
if [ "$PLANNED_ITEM" != "null" ]; then
  curl -s -X PUT "$BASE_URL/api/items/$PLANNED_ITEM" \
    -H "Content-Type: application/json" \
    -d '{"status": "en_cours"}' > /dev/null
  echo "‚úÖ Swipe √Ä regarder ‚Üí En cours"
else
  echo "‚ùå Pas d'item √† regarder disponible"
fi

# Test 2: Swipe "En cours" vers "Termin√©"
echo "Test 2: Transition En cours ‚Üí Termin√©"
WATCHING_ITEM=$(echo "$ROOM_DATA" | jq -r '.items | map(select(.status == "en_cours")) | .[0].id')
if [ "$WATCHING_ITEM" != "null" ]; then
  curl -s -X PUT "$BASE_URL/api/items/$WATCHING_ITEM" \
    -H "Content-Type: application/json" \
    -d '{"status": "termine"}' > /dev/null
  echo "‚úÖ Swipe En cours ‚Üí Termin√©"
else
  echo "‚ùå Pas d'item en cours disponible"
fi

# Test 3: Swipe "Termin√©" vers "√Ä regarder" (remise en liste)
echo "Test 3: Transition Termin√© ‚Üí √Ä regarder"
COMPLETED_ITEM=$(echo "$ROOM_DATA" | jq -r '.items | map(select(.status == "termine")) | .[0].id')
if [ "$COMPLETED_ITEM" != "null" ]; then
  curl -s -X PUT "$BASE_URL/api/items/$COMPLETED_ITEM" \
    -H "Content-Type: application/json" \
    -d '{"status": "a_voir"}' > /dev/null
  echo "‚úÖ Swipe Termin√© ‚Üí √Ä regarder"
else
  echo "‚ùå Pas d'item termin√© disponible"
fi

# V√©rifier les changements
echo -e "${YELLOW}üìä V√©rification des changements apr√®s swipes${NC}"
UPDATED_ROOM_DATA=$(curl -s "$BASE_URL/api/rooms/$ROOM_ID/items")

NEW_PLANNED_COUNT=$(echo "$UPDATED_ROOM_DATA" | jq '.items | map(select(.status == "a_voir")) | length')
NEW_WATCHING_COUNT=$(echo "$UPDATED_ROOM_DATA" | jq '.items | map(select(.status == "en_cours")) | length')
NEW_COMPLETED_COUNT=$(echo "$UPDATED_ROOM_DATA" | jq '.items | map(select(.status == "termine")) | length')

echo "Nouveaux compteurs apr√®s swipes:"
echo "M√©dias √† regarder: $NEW_PLANNED_COUNT"
echo "M√©dias en cours: $NEW_WATCHING_COUNT"
echo "M√©dias termin√©s: $NEW_COMPLETED_COUNT"

# V√©rifier la structure RoomScreen
echo -e "${YELLOW}üì± V√©rification de la structure RoomScreen${NC}"

# V√©rifier que RoomScreen utilise bien les swipes
if grep -q "react-native-gesture-handler" /Users/ben/workspace/WatchList/mobile/src/screens/RoomScreen.tsx; then
  echo "‚úÖ RoomScreen utilise react-native-gesture-handler"
else
  echo "‚ùå RoomScreen n'utilise pas react-native-gesture-handler"
fi

if grep -q "PanGestureHandler" /Users/ben/workspace/WatchList/mobile/src/screens/RoomScreen.tsx; then
  echo "‚úÖ RoomScreen utilise PanGestureHandler"
else
  echo "‚ùå RoomScreen n'utilise pas PanGestureHandler"
fi

# V√©rifier les trois onglets
if grep -q "√Ä regarder\|En cours\|Termin√©" /Users/ben/workspace/WatchList/mobile/src/screens/RoomScreen.tsx; then
  echo "‚úÖ RoomScreen contient les trois onglets"
else
  echo "‚ùå RoomScreen ne contient pas tous les onglets"
fi

echo -e "${YELLOW}üß™ Test des fonctionnalit√©s sp√©cifiques √† chaque onglet${NC}"

# Test des filtres par statut
echo "Test des filtres par statut..."
PLANNED_ITEMS=$(echo "$UPDATED_ROOM_DATA" | jq '.items | map(select(.status == "a_voir"))')
WATCHING_ITEMS=$(echo "$UPDATED_ROOM_DATA" | jq '.items | map(select(.status == "en_cours"))')
COMPLETED_ITEMS=$(echo "$UPDATED_ROOM_DATA" | jq '.items | map(select(.status == "termine"))')

echo "Items filtr√©s par statut:"
echo "- √Ä regarder: $(echo "$PLANNED_ITEMS" | jq 'length') items"
echo "- En cours: $(echo "$WATCHING_ITEMS" | jq 'length') items"
echo "- Termin√©s: $(echo "$COMPLETED_ITEMS" | jq 'length') items"

# Test de suppression (swipe vers la corbeille)
echo -e "${YELLOW}üóëÔ∏è Test de suppression d'items${NC}"

# Supprimer un item
ITEM_TO_DELETE=$(echo "$UPDATED_ROOM_DATA" | jq -r '.items[0].id')
if [ "$ITEM_TO_DELETE" != "null" ]; then
  DELETE_RESPONSE=$(curl -s -X DELETE "$BASE_URL/api/items/$ITEM_TO_DELETE")
  echo "‚úÖ Item supprim√©: $ITEM_TO_DELETE"
else
  echo "‚ùå Pas d'item √† supprimer"
fi

# V√©rifier la suppression
FINAL_ROOM_DATA=$(curl -s "$BASE_URL/api/rooms/$ROOM_ID/items")
FINAL_TOTAL=$(echo "$FINAL_ROOM_DATA" | jq '.items | length')
echo "Nombre total d'items apr√®s suppression: $FINAL_TOTAL"

echo -e "${GREEN}‚úÖ Tests des swipes termin√©s${NC}"
echo -e "${YELLOW}üìã R√©sum√© des tests:${NC}"
echo "- ‚úÖ Cr√©ation de donn√©es de test"
echo "- ‚úÖ Test des transitions de statut"
echo "- ‚úÖ V√©rification des filtres"
echo "- ‚úÖ Test de suppression"
echo "- ‚úÖ V√©rification de la structure RoomScreen"

echo -e "${GREEN}üéâ Tous les tests de swipes sont valid√©s !${NC}"
echo -e "${YELLOW}üîó Room de test accessible sur: http://localhost:8081 (Room ID: $ROOM_ID)${NC}"
