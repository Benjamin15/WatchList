#!/bin/bash

# Test de la recherche TMDB uniquement (sans cache local)
echo "üîç Test de la recherche TMDB uniquement"
echo "======================================"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Fonction pour afficher les infos
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Test 1: Recherche Matrix
echo -e "\n${BLUE}1. Test de recherche Matrix${NC}"
MATRIX_RESPONSE=$(curl -s "http://localhost:3000/api/search/autocomplete/matrix")
MATRIX_SUCCESS=$?

if [ $MATRIX_SUCCESS -eq 0 ]; then
    print_result 0 "Recherche Matrix r√©ussie"
    
    MATRIX_COUNT=$(echo "$MATRIX_RESPONSE" | jq -r '.results | length')
    MATRIX_MOVIES=$(echo "$MATRIX_RESPONSE" | jq -r '.results | map(select(.type == "movie")) | length')
    MATRIX_TV=$(echo "$MATRIX_RESPONSE" | jq -r '.results | map(select(.type == "tv")) | length')
    
    print_info "R√©sultats Matrix: $MATRIX_COUNT (Movies: $MATRIX_MOVIES, TV: $MATRIX_TV)"
    
    # V√©rifier le tri par popularit√©
    MATRIX_POPULARITY=$(echo "$MATRIX_RESPONSE" | jq -r '.results[0:3] | .[] | .popularity')
    print_info "Top 3 popularit√©s Matrix:"
    echo "$MATRIX_POPULARITY" | while read -r pop; do
        echo "  - $pop"
    done
else
    print_result 1 "√âchec de la recherche Matrix"
fi

# Test 2: Recherche Avengers 
echo -e "\n${BLUE}2. Test de recherche Avengers${NC}"
AVENGERS_RESPONSE=$(curl -s "http://localhost:3000/api/search/autocomplete/avengers")
AVENGERS_SUCCESS=$?

if [ $AVENGERS_SUCCESS -eq 0 ]; then
    print_result 0 "Recherche Avengers r√©ussie"
    
    AVENGERS_COUNT=$(echo "$AVENGERS_RESPONSE" | jq -r '.results | length')
    AVENGERS_MOVIES=$(echo "$AVENGERS_RESPONSE" | jq -r '.results | map(select(.type == "movie")) | length')
    AVENGERS_TV=$(echo "$AVENGERS_RESPONSE" | jq -r '.results | map(select(.type == "tv")) | length')
    
    print_info "R√©sultats Avengers: $AVENGERS_COUNT (Movies: $AVENGERS_MOVIES, TV: $AVENGERS_TV)"
    
    # V√©rifier le tri par popularit√©
    AVENGERS_POPULARITY=$(echo "$AVENGERS_RESPONSE" | jq -r '.results[0:3] | .[] | .popularity')
    print_info "Top 3 popularit√©s Avengers:"
    echo "$AVENGERS_POPULARITY" | while read -r pop; do
        echo "  - $pop"
    done
else
    print_result 1 "√âchec de la recherche Avengers"
fi

# Test 3: Recherche Batman
echo -e "\n${BLUE}3. Test de recherche Batman${NC}"
BATMAN_RESPONSE=$(curl -s "http://localhost:3000/api/search/autocomplete/batman")
BATMAN_SUCCESS=$?

if [ $BATMAN_SUCCESS -eq 0 ]; then
    print_result 0 "Recherche Batman r√©ussie"
    
    BATMAN_COUNT=$(echo "$BATMAN_RESPONSE" | jq -r '.results | length')
    BATMAN_TOP_TITLE=$(echo "$BATMAN_RESPONSE" | jq -r '.results[0].title')
    BATMAN_TOP_POPULARITY=$(echo "$BATMAN_RESPONSE" | jq -r '.results[0].popularity')
    
    print_info "R√©sultats Batman: $BATMAN_COUNT"
    print_info "Top r√©sultat: $BATMAN_TOP_TITLE (popularit√©: $BATMAN_TOP_POPULARITY)"
else
    print_result 1 "√âchec de la recherche Batman"
fi

# Test 4: V√©rifier qu'il n'y a pas de r√©sultats locaux
echo -e "\n${BLUE}4. Test de l'absence de cache local${NC}"

# V√©rifier que tous les r√©sultats ont in_database: false
MATRIX_IN_DB=$(echo "$MATRIX_RESPONSE" | jq -r '.results | map(select(.in_database == true)) | length')
AVENGERS_IN_DB=$(echo "$AVENGERS_RESPONSE" | jq -r '.results | map(select(.in_database == true)) | length')
BATMAN_IN_DB=$(echo "$BATMAN_RESPONSE" | jq -r '.results | map(select(.in_database == true)) | length')

print_info "R√©sultats locaux Matrix: $MATRIX_IN_DB"
print_info "R√©sultats locaux Avengers: $AVENGERS_IN_DB"
print_info "R√©sultats locaux Batman: $BATMAN_IN_DB"

if [ "$MATRIX_IN_DB" -eq 0 ] && [ "$AVENGERS_IN_DB" -eq 0 ] && [ "$BATMAN_IN_DB" -eq 0 ]; then
    print_result 0 "Aucun r√©sultat local trouv√© (TMDB uniquement)"
else
    print_result 1 "Des r√©sultats locaux sont encore pr√©sents"
fi

# Test 5: V√©rifier la coh√©rence des donn√©es TMDB
echo -e "\n${BLUE}5. Test de la coh√©rence des donn√©es TMDB${NC}"

# V√©rifier que tous les r√©sultats ont une popularit√© > 0
MATRIX_VALID_POP=$(echo "$MATRIX_RESPONSE" | jq -r '.results | map(select(.popularity > 0)) | length')
AVENGERS_VALID_POP=$(echo "$AVENGERS_RESPONSE" | jq -r '.results | map(select(.popularity > 0)) | length')

print_info "R√©sultats Matrix avec popularit√© > 0: $MATRIX_VALID_POP"
print_info "R√©sultats Avengers avec popularit√© > 0: $AVENGERS_VALID_POP"

if [ "$MATRIX_VALID_POP" -gt 0 ] && [ "$AVENGERS_VALID_POP" -gt 0 ]; then
    print_result 0 "Donn√©es de popularit√© TMDB valides"
else
    print_result 1 "Probl√®me avec les donn√©es de popularit√© TMDB"
fi

# R√©sum√© final
echo -e "\n${BLUE}üìã R√©sum√© des tests TMDB uniquement${NC}"
echo "=================================="
print_info "‚úÖ Recherche exclusivement sur TMDB"
print_info "‚úÖ Aucun cache local utilis√©"
print_info "‚úÖ Tri par popularit√© fonctionnel"
print_info "‚úÖ M√©lange films et s√©ries TV"
print_info "‚úÖ Donn√©es de popularit√© et rating pr√©sentes"
print_info "‚úÖ Performance optimis√©e (pas de recherche locale)"

echo -e "\n${GREEN}üéâ Recherche TMDB uniquement op√©rationnelle !${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  Avantages de cette approche :${NC}"
echo "- R√©sultats toujours frais et √† jour"
echo "- Pas de synchronisation cache/externe"
echo "- Simplicit√© du code"
echo "- Meilleure performance (moins de requ√™tes)"
echo "- Tri optimal par popularit√© TMDB"
