#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic de l\'erreur roomId dans loadWatchlistItems...\n');

const filePath = path.join(__dirname, 'mobile/src/screens/RoomScreen.tsx');

try {
  const content = fs.readFileSync(filePath, 'utf8');
  
  console.log('üìã V√©rifications sp√©cifiques pour l\'erreur ligne 791:');
  
  // V√©rifier la fonction loadWatchlistItems
  if (content.includes('const loadWatchlistItems = async () => {')) {
    console.log('‚úÖ Fonction loadWatchlistItems trouv√©e');
    
    // V√©rifier la validation de roomId
    if (content.includes('const numericRoomId = parseInt(roomId, 10);')) {
      console.log('‚úÖ Validation numericRoomId ajout√©e');
    } else {
      console.log('‚ùå Validation numericRoomId manquante');
    }
    
    if (content.includes('if (isNaN(numericRoomId)) {')) {
      console.log('‚úÖ V√©rification isNaN ajout√©e');
    } else {
      console.log('‚ùå V√©rification isNaN manquante');
    }
    
    if (content.includes('apiService.getWatchlist(numericRoomId)')) {
      console.log('‚úÖ Appel API avec numericRoomId valid√©');
    } else if (content.includes('apiService.getWatchlist(parseInt(roomId))')) {
      console.log('‚ö†Ô∏è  Appel API avec parseInt simple (peut causer NaN)');
    } else {
      console.log('‚ùå Appel API getWatchlist introuvable');
    }
  } else {
    console.log('‚ùå Fonction loadWatchlistItems introuvable');
  }
  
  console.log('');
  
  // V√©rifier les autres utilisations de roomId
  console.log('üìã Autres utilisations de roomId:');
  
  if (content.includes('apiService.getRoom(roomId)')) {
    console.log('‚úÖ getRoom(roomId) - OK (accepte string)');
  }
  
  if (content.includes('apiService.getVotesByRoom(roomId)')) {
    console.log('‚úÖ getVotesByRoom(roomId) - √Ä v√©rifier');
  }
  
  console.log('');
  
  // Analyser les erreurs potentielles
  console.log('üîç Causes possibles de l\'erreur ligne 791:');
  console.log('1. roomId est undefined/null');
  console.log('2. roomId n\'est pas un nombre valide (ex: "abc")');
  console.log('3. parseInt(roomId) retourne NaN');
  console.log('4. L\'API getWatchlist rejette la requ√™te');
  console.log('5. Probl√®me de r√©seau/serveur');
  
  console.log('');
  console.log('üí° Solutions appliqu√©es:');
  console.log('‚úÖ Validation robuste avec parseInt(roomId, 10)');
  console.log('‚úÖ V√©rification isNaN avant appel API');
  console.log('‚úÖ Message d\'erreur d√©taill√© avec roomId');
  
  console.log('');
  console.log('üöÄ Pour tester:');
  console.log('1. V√©rifiez que roomId est bien pass√© en param√®tre de navigation');
  console.log('2. V√©rifiez la console pour le log "Loading watchlist items for roomId: XXX"');
  console.log('3. Si roomId est invalide, vous verrez "Invalid roomId: XXX"');
  
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture du fichier:', error.message);
}

console.log('');
