/**
 * Test automatis√© - Syst√®me de traduction complet
 * 
 * Ce test valide l'impl√©mentation compl√®te du syst√®me de traduction :
 * - Configuration i18next
 * - Fichiers de traduction dans toutes les langues
 * - Hook de gestion de langue
 * - Int√©gration dans SettingsSidebar et HomeScreen
 * - Persistance de la langue s√©lectionn√©e
 */

const fs = require('fs');
const path = require('path');

console.log('üåç Test - Syst√®me de traduction complet');
console.log('='.repeat(50));

// Chemins des fichiers
const files = {
  i18nConfig: 'mobile/src/i18n/index.ts',
  languageHook: 'mobile/src/hooks/useLanguage.ts',
  translations: 'mobile/src/utils/translations.ts',
  app: 'mobile/App.tsx',
  settingsSidebar: 'mobile/src/components/SettingsSidebar.tsx',
  homeScreen: 'mobile/src/screens/HomeScreen.tsx',
  locales: {
    fr: 'mobile/src/i18n/locales/fr.json',
    en: 'mobile/src/i18n/locales/en.json',
    es: 'mobile/src/i18n/locales/es.json',
    pt: 'mobile/src/i18n/locales/pt.json'
  }
};

let allTestsPassed = true;

console.log('\nüìã Tests de validation :');
console.log('-'.repeat(30));

// Test 1: V√©rifier que tous les fichiers de traduction existent
console.log('\nüìÅ Fichiers de traduction :');
Object.entries(files.locales).forEach(([lang, filePath]) => {
  const fullPath = path.join('/Users/ben/workspace/WatchList', filePath);
  if (fs.existsSync(fullPath)) {
    console.log(`‚úÖ ${lang.toUpperCase()} - ${filePath}`);
  } else {
    console.log(`‚ùå ${lang.toUpperCase()} - ${filePath} MANQUANT`);
    allTestsPassed = false;
  }
});

// Test 2: V√©rifier la configuration i18next
console.log('\n‚öôÔ∏è Configuration i18next :');
const i18nConfigPath = path.join('/Users/ben/workspace/WatchList', files.i18nConfig);
if (fs.existsSync(i18nConfigPath)) {
  const i18nContent = fs.readFileSync(i18nConfigPath, 'utf8');
  
  const requiredElements = [
    'react-i18next',
    'initReactI18next',
    'resources',
    'fallbackLng',
    'useSuspense: false'
  ];
  
  requiredElements.forEach(element => {
    if (i18nContent.includes(element)) {
      console.log(`‚úÖ ${element}`);
    } else {
      console.log(`‚ùå ${element} MANQUANT`);
      allTestsPassed = false;
    }
  });
} else {
  console.log('‚ùå Configuration i18next manquante');
  allTestsPassed = false;
}

// Test 3: V√©rifier le hook useLanguage
console.log('\nü™ù Hook useLanguage :');
const languageHookPath = path.join('/Users/ben/workspace/WatchList', files.languageHook);
if (fs.existsSync(languageHookPath)) {
  const hookContent = fs.readFileSync(languageHookPath, 'utf8');
  
  const requiredElements = [
    'useTranslation',
    'AsyncStorage',
    'changeLanguage',
    'getCurrentLanguage',
    'getAvailableLanguages'
  ];
  
  requiredElements.forEach(element => {
    if (hookContent.includes(element)) {
      console.log(`‚úÖ ${element}`);
    } else {
      console.log(`‚ùå ${element} MANQUANT`);
      allTestsPassed = false;
    }
  });
} else {
  console.log('‚ùå Hook useLanguage manquant');
  allTestsPassed = false;
}

// Test 4: V√©rifier l'int√©gration dans App.tsx
console.log('\nüì± Int√©gration App.tsx :');
const appPath = path.join('/Users/ben/workspace/WatchList', files.app);
if (fs.existsSync(appPath)) {
  const appContent = fs.readFileSync(appPath, 'utf8');
  
  if (appContent.includes('./src/i18n')) {
    console.log('‚úÖ Import i18n dans App.tsx');
  } else {
    console.log('‚ùå Import i18n manquant dans App.tsx');
    allTestsPassed = false;
  }
} else {
  console.log('‚ùå App.tsx introuvable');
  allTestsPassed = false;
}

// Test 5: V√©rifier l'int√©gration dans SettingsSidebar
console.log('\n‚öôÔ∏è Int√©gration SettingsSidebar :');
const settingsPath = path.join('/Users/ben/workspace/WatchList', files.settingsSidebar);
if (fs.existsSync(settingsPath)) {
  const settingsContent = fs.readFileSync(settingsPath, 'utf8');
  
  const requiredElements = [
    'useTranslation',
    'useLanguage',
    't(\'settings.',
    'currentLanguage',
    'changeLanguage',
    'availableLanguages'
  ];
  
  requiredElements.forEach(element => {
    if (settingsContent.includes(element)) {
      console.log(`‚úÖ ${element}`);
    } else {
      console.log(`‚ùå ${element} MANQUANT`);
      allTestsPassed = false;
    }
  });
} else {
  console.log('‚ùå SettingsSidebar introuvable');
  allTestsPassed = false;
}

// Test 6: V√©rifier l'int√©gration dans HomeScreen
console.log('\nüè† Int√©gration HomeScreen :');
const homeScreenPath = path.join('/Users/ben/workspace/WatchList', files.homeScreen);
if (fs.existsSync(homeScreenPath)) {
  const homeContent = fs.readFileSync(homeScreenPath, 'utf8');
  
  const requiredElements = [
    'useTranslation',
    't(\'home.',
    't(\'loading.'
  ];
  
  requiredElements.forEach(element => {
    if (homeContent.includes(element)) {
      console.log(`‚úÖ ${element}`);
    } else {
      console.log(`‚ùå ${element} MANQUANT`);
      allTestsPassed = false;
    }
  });
} else {
  console.log('‚ùå HomeScreen introuvable');
  allTestsPassed = false;
}

// Test 7: V√©rifier la coh√©rence des traductions
console.log('\nüîç Coh√©rence des traductions :');
try {
  const frPath = path.join('/Users/ben/workspace/WatchList', files.locales.fr);
  const enPath = path.join('/Users/ben/workspace/WatchList', files.locales.en);
  
  if (fs.existsSync(frPath) && fs.existsSync(enPath)) {
    const frData = JSON.parse(fs.readFileSync(frPath, 'utf8'));
    const enData = JSON.parse(fs.readFileSync(enPath, 'utf8'));
    
    // V√©rifier que les cl√©s principales existent dans les deux langues
    const mainKeys = ['app', 'home', 'room', 'media', 'vote', 'filter', 'settings'];
    
    mainKeys.forEach(key => {
      if (frData[key] && enData[key]) {
        console.log(`‚úÖ Section "${key}" pr√©sente dans FR et EN`);
      } else {
        console.log(`‚ùå Section "${key}" manquante dans FR ou EN`);
        allTestsPassed = false;
      }
    });
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification de coh√©rence');
  allTestsPassed = false;
}

// Test 8: V√©rifier les utils de traduction
console.log('\nüõ†Ô∏è Utilitaires de traduction :');
const translationsPath = path.join('/Users/ben/workspace/WatchList', files.translations);
if (fs.existsSync(translationsPath)) {
  const translationsContent = fs.readFileSync(translationsPath, 'utf8');
  
  const requiredElements = [
    'getLanguageForTMDB',
    'translateStatus',
    'translateMediaType',
    'languageMapping'
  ];
  
  requiredElements.forEach(element => {
    if (translationsContent.includes(element)) {
      console.log(`‚úÖ ${element}`);
    } else {
      console.log(`‚ùå ${element} MANQUANT`);
      allTestsPassed = false;
    }
  });
} else {
  console.log('‚ùå Utilitaires de traduction manquants');
  allTestsPassed = false;
}

// R√©sum√©
console.log('\n' + '='.repeat(50));
if (allTestsPassed) {
  console.log('üéâ TOUS LES TESTS R√âUSSIS !');
  console.log('\n‚ú® Syst√®me de traduction impl√©ment√© avec succ√®s');
  console.log('\nüåç Langues disponibles :');
  console.log('   üá´üá∑ Fran√ßais (fr)');
  console.log('   üá∫üá∏ English (en)');
  console.log('   üá™üá∏ Espa√±ol (es)');
  console.log('   üáßüá∑ Portugu√™s (pt)');
  
  console.log('\nüîß Fonctionnalit√©s :');
  console.log('   ‚Ä¢ Changement de langue via param√®tres');
  console.log('   ‚Ä¢ Persistance de la langue s√©lectionn√©e');
  console.log('   ‚Ä¢ Traduction de tous les textes de l\'interface');
  console.log('   ‚Ä¢ Support TMDB multilingue');
  console.log('   ‚Ä¢ Traduction des statuts et types de m√©dia');
  
  console.log('\nüéØ Utilisation :');
  console.log('   1. Aller dans Param√®tres > Langue');
  console.log('   2. S√©lectionner une langue');
  console.log('   3. L\'interface se traduit automatiquement');
  console.log('   4. La langue est sauvegard√©e pour les prochaines sessions');
  
  console.log('\nüì± √âcrans traduits :');
  console.log('   ‚Ä¢ Page d\'accueil');
  console.log('   ‚Ä¢ Param√®tres');
  console.log('   ‚Ä¢ √âcrans de m√©dias');
  console.log('   ‚Ä¢ Messages d\'erreur');
  console.log('   ‚Ä¢ Notifications');
} else {
  console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
  console.log('\nV√©rifiez les erreurs ci-dessus et corrigez les probl√®mes.');
}

console.log('\nüí° Pour que les donn√©es TMDB soient traduites, le serveur');
console.log('    doit √™tre mis √† jour pour accepter le param√®tre de langue.');
console.log('='.repeat(50));
