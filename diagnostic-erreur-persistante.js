#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic de l\'erreur persistante ligne 792...\n');

console.log('üìã V√©rifications de l\'erreur:');

// V√©rifier la configuration API
console.log('1. Configuration API:');
const configPath = path.join(__dirname, 'mobile/src/constants/config.ts');
try {
  const configContent = fs.readFileSync(configPath, 'utf8');
  
  // Extraire l'IP locale
  const ipMatch = configContent.match(/LOCAL_IP = '([^']+)'/);
  if (ipMatch) {
    console.log(`   ‚úÖ IP locale configur√©e: ${ipMatch[1]}`);
    console.log(`   üì° URL API: http://${ipMatch[1]}:3000/api`);
  }
  
  // V√©rifier USE_MOCK_DATA
  const mockMatch = configContent.match(/USE_MOCK_DATA = (true|false)/);
  if (mockMatch) {
    console.log(`   ${mockMatch[1] === 'false' ? '‚úÖ' : '‚ö†Ô∏è'} USE_MOCK_DATA: ${mockMatch[1]} ${mockMatch[1] === 'false' ? '(utilise vraie API)' : '(utilise mock)'}`);
  }
} catch (error) {
  console.log('   ‚ùå Impossible de lire config.ts');
}

console.log('');

// V√©rifier les endpoints
console.log('2. Configuration des endpoints:');
const endpointsPath = path.join(__dirname, 'mobile/src/constants/index.ts');
try {
  const endpointsContent = fs.readFileSync(endpointsPath, 'utf8');
  
  if (endpointsContent.includes('WATCHLIST: (roomId: number | string)')) {
    console.log('   ‚úÖ WATCHLIST endpoint accepte number | string');
  } else if (endpointsContent.includes('WATCHLIST: (roomId: number)')) {
    console.log('   ‚ùå WATCHLIST endpoint accepte seulement number');
  } else {
    console.log('   ‚ö†Ô∏è  WATCHLIST endpoint non trouv√©');
  }
} catch (error) {
  console.log('   ‚ùå Impossible de lire index.ts');
}

console.log('');

// V√©rifier la fonction loadWatchlistItems
console.log('3. Fonction loadWatchlistItems:');
const roomScreenPath = path.join(__dirname, 'mobile/src/screens/RoomScreen.tsx');
try {
  const roomScreenContent = fs.readFileSync(roomScreenPath, 'utf8');
  
  if (roomScreenContent.includes('console.log(\'RoomId type:\', typeof roomId);')) {
    console.log('   ‚úÖ Logs de diagnostic ajout√©s');
  } else {
    console.log('   ‚ùå Logs de diagnostic manquants');
  }
  
  if (roomScreenContent.includes('console.error(\'Error details:\',')) {
    console.log('   ‚úÖ Logs d\'erreur d√©taill√©s ajout√©s');
  } else {
    console.log('   ‚ùå Logs d\'erreur d√©taill√©s manquants');
  }
} catch (error) {
  console.log('   ‚ùå Impossible de lire RoomScreen.tsx');
}

console.log('');

console.log('üîç Causes possibles de l\'erreur persistante:');
console.log('');
console.log('1. üåê SERVEUR BACKEND NON DISPONIBLE');
console.log('   - Le serveur sur http://192.168.0.14:3000 n\'est pas d√©marr√©');
console.log('   - V√©rifiez: cd server && npm start');
console.log('');
console.log('2. üö™ ENDPOINT INEXISTANT');
console.log('   - L\'endpoint /rooms/{roomId}/watchlist n\'existe pas c√¥t√© serveur');
console.log('   - V√©rifiez les routes du serveur backend');
console.log('');
console.log('3. üì° PROBL√àME DE R√âSEAU');
console.log('   - Firewall bloque la connexion');
console.log('   - IP locale incorrecte (192.168.0.14)');
console.log('');
console.log('4. üîë AUTHENTIFICATION/AUTORISATION');
console.log('   - Headers manquants (device ID, etc.)');
console.log('   - Room ID invalide c√¥t√© serveur');
console.log('');
console.log('üí° PROCHAINES √âTAPES:');
console.log('1. Testez l\'ouverture de la room √† nouveau');
console.log('2. Regardez les logs d√©taill√©s dans Metro/console');
console.log('3. V√©rifiez si le serveur backend est d√©marr√©');
console.log('4. Partagez les nouveaux logs d\'erreur d√©taill√©s');

console.log('');
