#!/bin/bash

# Script de test rapide pour l'int√©gration Backend/Mobile
# Usage: ./test-integration.sh

echo "üß™ Test d'int√©gration Backend/Mobile WatchList"
echo "=============================================="

# Configuration
API_BASE="http://localhost:3000/api"
ROOM_ID=""

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Test 1: Sant√© du serveur
echo -e "\n${BLUE}1. Test de la sant√© du serveur${NC}"
HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_BASE}/health")
HTTP_CODE="${HEALTH_RESPONSE: -3}"
RESPONSE_BODY="${HEALTH_RESPONSE%???}"

if [ "$HTTP_CODE" = "200" ]; then
    log_success "Serveur backend accessible"
    log_info "R√©ponse: $RESPONSE_BODY"
else
    log_error "Serveur backend inaccessible (HTTP $HTTP_CODE)"
    exit 1
fi

# Test 2: Cr√©er une room
echo -e "\n${BLUE}2. Cr√©ation d'une room de test${NC}"
CREATE_ROOM_RESPONSE=$(curl -s -X POST "${API_BASE}/rooms" \
  -H "Content-Type: application/json" \
  -d '{"name": "Room Test Integration"}')

if echo "$CREATE_ROOM_RESPONSE" | grep -q "room_id"; then
    ROOM_ID=$(echo "$CREATE_ROOM_RESPONSE" | sed -n 's/.*"room_id":"\([^"]*\)".*/\1/p')
    log_success "Room cr√©√©e avec succ√®s"
    log_info "Room ID: $ROOM_ID"
else
    log_error "√âchec de la cr√©ation de la room"
    log_info "R√©ponse: $CREATE_ROOM_RESPONSE"
    exit 1
fi

# Test 3: R√©cup√©rer les infos de la room
echo -e "\n${BLUE}3. R√©cup√©ration des infos de la room${NC}"
GET_ROOM_RESPONSE=$(curl -s "${API_BASE}/rooms/${ROOM_ID}")

if echo "$GET_ROOM_RESPONSE" | grep -q "Room Test Integration"; then
    log_success "Room r√©cup√©r√©e avec succ√®s"
else
    log_error "√âchec de la r√©cup√©ration de la room"
    log_info "R√©ponse: $GET_ROOM_RESPONSE"
fi

# Test 4: Ajouter un m√©dia
echo -e "\n${BLUE}4. Ajout d'un m√©dia de test${NC}"
ADD_MEDIA_RESPONSE=$(curl -s -X POST "${API_BASE}/items/rooms/${ROOM_ID}/items" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Test Movie Integration",
    "type": "movie",
    "year": 2024,
    "genre": "Test",
    "description": "Un film de test pour l'\''int√©gration"
  }')

if echo "$ADD_MEDIA_RESPONSE" | grep -q "Test Movie Integration"; then
    MEDIA_ID=$(echo "$ADD_MEDIA_RESPONSE" | sed -n 's/.*"id":\([0-9]*\).*/\1/p')
    log_success "M√©dia ajout√© avec succ√®s"
    log_info "Media ID: $MEDIA_ID"
else
    log_error "√âchec de l'ajout du m√©dia"
    log_info "R√©ponse: $ADD_MEDIA_RESPONSE"
fi

# Test 5: R√©cup√©rer les items de la room
echo -e "\n${BLUE}5. R√©cup√©ration des items de la room${NC}"
GET_ITEMS_RESPONSE=$(curl -s "${API_BASE}/rooms/${ROOM_ID}/items")

if echo "$GET_ITEMS_RESPONSE" | grep -q "Test Movie Integration"; then
    log_success "Items r√©cup√©r√©s avec succ√®s"
    ITEM_COUNT=$(echo "$GET_ITEMS_RESPONSE" | grep -o '"id":[0-9]*' | wc -l)
    log_info "Nombre d'items: $ITEM_COUNT"
else
    log_error "√âchec de la r√©cup√©ration des items"
    log_info "R√©ponse: $GET_ITEMS_RESPONSE"
fi

# Test 6: Mettre √† jour le statut du m√©dia
if [ -n "$MEDIA_ID" ]; then
    echo -e "\n${BLUE}6. Mise √† jour du statut du m√©dia${NC}"
    UPDATE_STATUS_RESPONSE=$(curl -s -X PUT "${API_BASE}/items/rooms/${ROOM_ID}/items/${MEDIA_ID}/status" \
      -H "Content-Type: application/json" \
      -d '{"status": "en_cours"}')

    if echo "$UPDATE_STATUS_RESPONSE" | grep -q "en_cours"; then
        log_success "Statut mis √† jour avec succ√®s"
    else
        log_error "√âchec de la mise √† jour du statut"
        log_info "R√©ponse: $UPDATE_STATUS_RESPONSE"
    fi
fi

# Test 7: Test de recherche (si l'endpoint existe)
echo -e "\n${BLUE}7. Test de recherche${NC}"
SEARCH_RESPONSE=$(curl -s "${API_BASE}/search/autocomplete/movie/spider" 2>/dev/null)

if [ "$?" = "0" ] && [ -n "$SEARCH_RESPONSE" ]; then
    log_success "Recherche fonctionnelle"
else
    log_warning "Recherche non disponible ou endpoint diff√©rent"
fi

# R√©sum√©
echo -e "\n${BLUE}üìã R√©sum√© des tests${NC}"
echo "=================="
log_info "Room de test cr√©√©e: $ROOM_ID"
log_info "M√©dia de test ajout√©: $MEDIA_ID"
echo ""
log_info "Pour tester l'application mobile:"
echo "1. Ouvrir l'app mobile"
echo "2. Utiliser le code de room: $ROOM_ID"
echo "3. V√©rifier que le m√©dia 'Test Movie Integration' appara√Æt"
echo "4. Tester le swipe pour changer le statut"
echo "5. Tester l'ajout de m√©dias via la recherche"
echo ""
log_success "Tests d'int√©gration termin√©s !"
